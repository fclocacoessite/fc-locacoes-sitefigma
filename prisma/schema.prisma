// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

// Perfil completo do cliente com dados de segurança
model ClientProfile {
  id                    String   @id @default(cuid())
  user_id               String   @unique // Referência ao auth.users do Supabase
  email                 String   @unique
  name                  String
  role                  UserRole  @default(CLIENT)
  
  // Dados pessoais obrigatórios
  cpf                   String?  @unique // CPF para pessoa física
  cnpj                  String?  @unique // CNPJ para pessoa jurídica
  phone                 String
  birth_date            DateTime?
  
  // Endereço completo
  address               String
  city                  String
  state                 String
  zip_code              String
  country               String   @default("Brasil")
  
  // Documentos de identidade
  rg                    String?
  cnh                   String?
  cnh_expiry            DateTime?
  
  // Comprovantes
  proof_of_residence    String? // URL do arquivo
  proof_of_income       String? // URL do arquivo
  company_documents     String? // URL dos documentos da empresa
  
  // Status de verificação
  is_verified           Boolean  @default(false)
  verification_date     DateTime?
  verified_by           String?
  
  // Dados adicionais
  emergency_contact     String?
  emergency_phone       String?
  notes                 String?
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relacionamentos
  quotes                Quote[]
  contracts             Contract[]
  
  @@index([email])
  @@index([cpf])
  @@index([cnpj])
}

model Vehicle {
  id           String   @id @default(cuid())
  brand        String
  model        String
  year         Int
  plate        String   @unique
  category     String
  daily_rate   Float
  weekly_rate  Float?
  monthly_rate Float?
  is_available Boolean  @default(true)
  image_url    String?
  description  String?
  features     String[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relacionamentos
  quotes       Quote[]
  contracts    Contract[]
}

model Quote {
  id          String   @id @default(cuid())
  client_id   String?  // Opcional para orçamentos anônimos
  client_name String   // Nome do cliente (obrigatório)
  client_email String  // Email do cliente (obrigatório)
  client_phone String  // Telefone do cliente (obrigatório)
  vehicle_id  String
  start_date  DateTime
  end_date    DateTime
  total_days  Int
  total_cost  Float
  status      QuoteStatus @default(PENDING)
  message     String?  // Mensagem opcional do cliente
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relacionamentos
  client      ClientProfile? @relation(fields: [client_id], references: [id])
  vehicle     Vehicle @relation(fields: [vehicle_id], references: [id])
  contract    Contract?
}

enum QuoteStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model Contract {
  id         String   @id @default(cuid())
  quote_id   String  @unique // Um contrato por orçamento
  client_id  String
  vehicle_id String
  start_date DateTime
  end_date   DateTime
  total_cost Float
  status     ContractStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relacionamentos
  client     ClientProfile @relation(fields: [client_id], references: [id])
  quote      Quote @relation(fields: [quote_id], references: [id])
  vehicle    Vehicle @relation(fields: [vehicle_id], references: [id])
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
} 